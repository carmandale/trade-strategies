"""Update schema for Phase 1: remove users, update tables structure

Revision ID: 87bc83f32a13
Revises: 2aefcf550525
Create Date: 2025-07-30 16:22:30.852045

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '87bc83f32a13'
down_revision: Union[str, None] = '2aefcf550525'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_data_cache',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=10), nullable=False),
    sa.Column('data_date', sa.DateTime(), nullable=False),
    sa.Column('data_type', sa.String(length=50), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('symbol', 'data_date', 'data_type')
    )
    op.create_table('strategies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('strategy_type', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=10), server_default='SPY', nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('backtests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('strategy_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('timeframe', sa.String(length=20), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trades',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('strategy_id', sa.UUID(), nullable=True),
    sa.Column('trade_date', sa.DateTime(), nullable=False),
    sa.Column('entry_time', sa.DateTime(), nullable=False),
    sa.Column('exit_time', sa.DateTime(), nullable=True),
    sa.Column('symbol', sa.String(length=10), server_default='SPY', nullable=False),
    sa.Column('strategy_type', sa.String(length=50), nullable=False),
    sa.Column('strikes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('contracts', sa.Integer(), nullable=False),
    sa.Column('entry_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('exit_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('credit_debit', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('realized_pnl', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('status', sa.String(length=20), server_default='open', nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trades')
    op.drop_table('backtests')
    op.drop_table('strategies')
    op.drop_table('market_data_cache')
    # ### end Alembic commands ###
