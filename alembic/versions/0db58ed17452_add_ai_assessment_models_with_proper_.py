"""Add AI assessment models with proper constraints

Revision ID: 0db58ed17452
Revises: 66fb0f864ac9
Create Date: 2025-08-11 10:10:49.476228

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0db58ed17452'
down_revision: Union[str, None] = '66fb0f864ac9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop enum types if they exist (in case of previous failed migrations)
    op.execute("DROP TYPE IF EXISTS airecommendation CASCADE")
    op.execute("DROP TYPE IF EXISTS reasoningeffort CASCADE")
    op.create_table('ai_assessments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('assessment_id', sa.String(length=100), nullable=False),
    sa.Column('strategy_hash', sa.String(length=200), nullable=False),
    sa.Column('strategy_type', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=10), nullable=False),
    sa.Column('strategy_params', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('recommendation', sa.Enum('GO', 'CAUTION', 'NO_GO', name='airecommendation'), nullable=False),
    sa.Column('confidence', sa.Integer(), nullable=False),
    sa.Column('reasoning', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('market_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('model_used', sa.String(length=50), server_default='gpt-5', nullable=True),
    sa.Column('token_usage', sa.Integer(), nullable=True),
    sa.Column('cost_usd', sa.DECIMAL(precision=10, scale=4), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('confidence >= 0 AND confidence <= 100', name='check_confidence_range'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('assessment_id')
    )
    op.create_index('idx_ai_assessments_expires', 'ai_assessments', ['expires_at'], unique=False)
    op.create_index('idx_ai_assessments_strategy_hash', 'ai_assessments', ['strategy_hash'], unique=False)
    op.create_table('ai_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('model', sa.String(length=50), server_default='gpt-5', nullable=True),
    sa.Column('temperature', sa.DECIMAL(precision=3, scale=2), server_default='0.30', nullable=True),
    sa.Column('max_tokens', sa.Integer(), server_default='800', nullable=True),
    sa.Column('cache_ttl', sa.Integer(), server_default='300', nullable=True),
    sa.Column('reasoning_effort', sa.Enum('low', 'medium', 'high', name='reasoningeffort'), server_default=sa.text("'medium'"), nullable=True),
    sa.Column('auto_assess', sa.Boolean(), server_default='false', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('cache_ttl >= 0 AND cache_ttl <= 3600', name='check_cache_ttl_range'),
    sa.CheckConstraint('max_tokens > 0 AND max_tokens <= 4096', name='check_max_tokens_range'),
    sa.CheckConstraint('temperature >= 0 AND temperature <= 1', name='check_temperature_range'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_usage_log',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('assessment_id', sa.String(length=100), nullable=True),
    sa.Column('operation', sa.String(length=50), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=False),
    sa.Column('tokens_input', sa.Integer(), nullable=False),
    sa.Column('tokens_output', sa.Integer(), nullable=False),
    sa.Column('tokens_total', sa.Integer(), nullable=False),
    sa.Column('cost_usd', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('response_time_ms', sa.Integer(), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_usage_log_assessment', 'ai_usage_log', ['assessment_id'], unique=False)
    op.create_index('idx_ai_usage_log_created', 'ai_usage_log', ['created_at'], unique=False)
    op.create_table('market_data_snapshots',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('snapshot_id', sa.String(length=100), nullable=False),
    sa.Column('spx_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('spx_change', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('spx_change_percent', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('vix_level', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('vix_change', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.Column('volume_vs_avg', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('technical_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('snapshot_id')
    )
    op.create_index('idx_market_snapshots_expires', 'market_data_snapshots', ['expires_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_market_snapshots_expires', table_name='market_data_snapshots')
    op.drop_table('market_data_snapshots')
    op.drop_index('idx_ai_usage_log_created', table_name='ai_usage_log')
    op.drop_index('idx_ai_usage_log_assessment', table_name='ai_usage_log')
    op.drop_table('ai_usage_log')
    op.drop_table('ai_settings')
    op.drop_index('idx_ai_assessments_strategy_hash', table_name='ai_assessments')
    op.drop_index('idx_ai_assessments_expires', table_name='ai_assessments')
    op.drop_table('ai_assessments')
    # ### end Alembic commands ###
